// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "../src/shared/zod/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EntryType {
  income
  expense
  borrow
  lend
  repayment
  repaymentReceive
  transfer
}

enum DebtType {
  borrow
  lend
}

enum CategoryType {
  income
  expense
}

model Entry {
  id              String        @id @default(uuid())
  type            EntryType
  date            DateTime
  amount          Decimal
  methodId        String
  categoryId      String?       // income/expense のときのみ使用
  purpose         String?
  privatePurpose  String?
  note            String?
  evidenceNote    String?
  debtId          String?

  method          Method        @relation("MethodToEntry", fields: [methodId], references: [id])
  category        Category?     @relation("CategoryToEntry", fields: [categoryId], references: [id])
  debt            Debt?         @relation("DebtToEntry", fields: [debtId], references: [id], onDelete: SetNull)
  typeMeta        EntryTypeMeta @relation("EntryTypeMetaToEntry", fields: [type], references: [type], onDelete: Cascade)
  transferFrom    Transfer?     @relation("TransferToRootEntry")
  debtAsRoot      Debt?         @relation("DebtToRootEntry")

  createdAt       DateTime      @default(now())
}

model Debt {
  id              String        @id @default(uuid())
  type            DebtType
  rootEntryId     String        @unique
  date            DateTime
  amount          Decimal
  counterpart     String
  repaidAt        DateTime?
  memo            String?

  typeMeta        DebtTypeMeta  @relation("DebtTypeMetaToDebt", fields: [type], references: [type], onDelete: Cascade)
  entry           Entry[]       @relation("DebtToEntry")
  rootEntry       Entry         @relation("DebtToRootEntry", fields: [rootEntryId], references: [id], onDelete: Cascade)
}

model Method {
  id              String     @id @default(uuid())
  name            String     @unique
  initialBalance  Decimal?
  archived        Boolean?

  entries         Entry[]    @relation("MethodToEntry")
  transfersFrom   Transfer[] @relation("TransferFromMethod")
  transfersTo     Transfer[] @relation("TransferToMethod")
}

model Transfer {
  id              String     @id @default(uuid())

  rootEntryId     String     @unique
  fromMethodId    String
  toMethodId      String
  date            DateTime
  note            String?

  fromMethod      Method     @relation("TransferFromMethod", fields: [fromMethodId], references: [id])
  toMethod        Method     @relation("TransferToMethod", fields: [toMethodId], references: [id])
  rootEntry       Entry      @relation("TransferToRootEntry", fields: [rootEntryId], references: [id], onDelete: Cascade)
}

model Category {
  id       String             @id @default(uuid())
  name     String             @unique
  type     CategoryType

  entries  Entry[]            @relation("CategoryToEntry")
  typeMeta CategoryTypeMeta   @relation("MethodTypeMetaToMethod", fields: [type], references: [type], onDelete: Cascade)
}

model EntryTypeMeta {
  type        EntryType     @id
  label       String        @unique
  description String?
  color       String?
  icon        String?
  sortOrder   Int?

  entries     Entry[]       @relation("EntryTypeMetaToEntry")
}

model DebtTypeMeta {
  type        DebtType      @id
  label       String        @unique
  description String?
  color       String?
  icon        String?
  sortOrder   Int?

  debts       Debt[]        @relation("DebtTypeMetaToDebt")
}

model CategoryTypeMeta {
  type        CategoryType  @id
  label       String        @unique
  description String?
  color       String?
  icon        String?
  sortOrder   Int?

  categories  Category[]    @relation("MethodTypeMetaToMethod")
}